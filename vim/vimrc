set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
Plugin 'scrooloose/nerdtree'
Plugin 'The-NERD-Commenter'
Plugin 'scrooloose/syntastic'
Plugin 'https://github.com/plasticboy/vim-markdown.git'
Plugin 'tpope/vim-fugitive'
Plugin 'Lokaltog/vim-easymotion'
"Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'Valloric/YouCompleteMe'
Plugin 'tpope/vim-sensible'
Plugin 'SirVer/ultisnips'
"Plugin 'triglav/vim-ultisnips'
Plugin 'honza/vim-snippets'
"Plugin 'flazz/vim-colorschemes'
"Plugin 'qualiabyte/vim-colorstepper'

" All of your Plugins must be added before the following line
call vundle#end()            " required
"filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
filetype plugin on

" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

" 256-color terminal
set t_Co=256

"Set the default colorscheme
colorscheme lukes-dev-scheme 

"Map Ctrl+N for Nerdtree
map <C-n> :NERDTreeToggle<CR> 

"Map Ctrl+T for NerdCommentor Toggle
"map <C-t> :NERDComToggleComment<CR>
let mapleader=","
map cc <leader>c<space>

"Splitting Related
"Map Ctrl+Arrow keys to window movement for splits
nmap <silent> <C-Up> :wincmd k<CR>
nmap <silent> <C-Down> :wincmd j<CR>
nmap <silent> <C-Left> :wincmd h<CR>
nmap <silent> <C-Right> :wincmd l<CR>
nmap <silent> <A-Up> :sp<CR>
nmap <silent> <A-Down> :sp<CR>
nmap <silent> <A-Left> :vsp<CR>
nmap <silent> <A-Right> :vsp<CR>

if &term =~ '^screen'
   " tmux will send xterm-style keys when its xterm-keys option is on
   execute "set <xUp>=\e[1;*A"
   execute "set <xDown>=\e[1;*B"
   execute "set <xRight>=\e[1;*C"
   execute "set <xLeft>=\e[1;*D"
endif

set splitbelow
set splitright

"Autostart NerdTree if no file arguments
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

"Set tab formats
set expandtab
set shiftwidth=3
set softtabstop=3

"Enable mouse support
set ttyfast
set mouse=a
set ttymouse=xterm2

"Set other editor configs
set number

"Set a default ycm_extra_conf.py file
let g:ycm_global_ycm_extra_conf = "~/.ycm_extra_conf_default.py"

"Set up snippets keys
function! g:UltiSnips_Complete()
    call UltiSnips#ExpandSnippet()
    if g:ulti_expand_res == 0
        if pumvisible()
            return "\<C-n>"
        else
            call UltiSnips#JumpForwards()
            if g:ulti_jump_forwards_res == 0
               return "\<TAB>"
            endif
        endif
    endif
    return ""
endfunction

au BufEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
let g:UltiSnipsListSnippets="<c-e>"
" this mapping Enter key to <C-y> to chose the current highlight item 
" and close the selection list, same as other IDEs.
" CONFLICT with some plugins like tpope/Endwise
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" NOTE - to reload the vimrc without reloading vim use
"  :so $MYVIMRC
" while editing this file.
