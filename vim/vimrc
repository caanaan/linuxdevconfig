"-----------------------------------------
" Overview
"-----------------------------------------
" My maintained vimrc.
"
" TODO:
" Add overview of basic instructions to use each plugin

"-----------------------------------------
" Vundle Package Manager
"-----------------------------------------
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
Plugin 'scrooloose/nerdtree'           "Tree view of files - Ctrl+N
Plugin 'Xuyuanp/nerdtree-git-plugin'   "Nerdtree git status markup
Plugin 'The-NERD-Commenter'            "Quick comment toggling - cc
Plugin 'scrooloose/syntastic'          "Syntax markup
Plugin 'plasticboy/vim-markdown.git'   "Markdown support
Plugin 'ctrlpvim/ctrlp.vim'            "Fuzzy file and tag searching - Ctrl+P
Plugin 'Valloric/YouCompleteMe'        "Smart tab completion - Tab
Plugin 'SirVer/ultisnips'              "Snippet engine - ?
Plugin 'tpope/vim-sensible'            "Generic and usual configs
Plugin 'honza/vim-snippets'            "Default snippets for lots of languages
Plugin 'vim-airline/vim-airline'       "Powerline like vim status bar 
Plugin 'powerline/fonts'               "Fonts needed for airline
Plugin 'edkolev/tmuxline.vim'          "Powerline like tmux status bar
Plugin 'Raimondi/delimitMate'          "Auto-completion for quotes, braces, etc 
Plugin 'xolox/vim-misc'                "Required for easy-tags
Plugin 'xolox/vim-easytags'            "Automatic ctag generation
Plugin 'majutsushi/tagbar'             "Ctag bar view
Plugin 'tpope/vim-fugitive'            "Git integration
Plugin 'tpope/vim-sleuth'              "Automtically set tab sizes

"Cool plugins, but not in my workflow right now
"Plugin 'bling/vim-bufferline'         "Display buffers in status bar
"Plugin 'qualiabyte/vim-colorstepper'  "Step between colorschemes
"Plugin 'flazz/vim-colorschemes'       "Other vim colorschemes
"Plugin 'triglav/vim-ultisnips'        "Another snippet engine
"Plugin 'Lokaltog/vim-easymotion'      "Cool file navigation tool

"Plugins that need work to function well
"Plugin 'vim-scripts/gitignore'        "NEED TO EVALUATE

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on

" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
" :PluginUpdate     - updates plugins with new versions.  Will need to
"                       recompile YCM afterwards!
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

"-----------------------------------------
" General Config 
"-----------------------------------------
"Set the default colorscheme
colorscheme lukes-dev-scheme

"Set the map leader key to ,
let mapleader=","

"Set the paste mode toggle to F10
set pastetoggle=<F10>

"Splitting Related
"Map Ctrl+Arrow keys to window movement for splits
nmap <silent> <C-Up> :wincmd k<CR>
nmap <silent> <C-Down> :wincmd j<CR>
nmap <silent> <C-Left> :wincmd h<CR>
nmap <silent> <C-Right> :wincmd l<CR>
nmap <silent> <A-Up> :sp<CR>
nmap <silent> <A-Down> :sp<CR>
nmap <silent> <A-Left> :vsp<CR>
nmap <silent> <A-Right> :vsp<CR>

set splitbelow
set splitright

if &term =~ '^screen'
   " tmux will send xterm-style keys when its xterm-keys option is on
   execute "set <xUp>=\e[1;*A"
   execute "set <xDown>=\e[1;*B"
   execute "set <xRight>=\e[1;*C"
   execute "set <xLeft>=\e[1;*D"
endif

"Set tab formats
set expandtab
set shiftwidth=3
set softtabstop=3

"Enable mouse support
set ttyfast
set mouse=a
set ttymouse=xterm2

"Set other editor configs
set number
set lazyredraw

"-----------------------------------------
" Air-line Extension
"-----------------------------------------
let g:airline_powerline_fonts = 1
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
" unicode symbols
let g:airline_left_sep = '»'
let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
let g:airline_right_sep = '◀'
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.whitespace = 'Ξ'

" airline symbols
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''

"Set the airline theme
let g:airline_theme="laederon"

"Turn off the whitespace issue enunciation
let g:airline#extensions#whitespace#enabled = 0

"NOTE - make sure to sed the system font to 'DejaVu Sans Mono for Powerline!"
"or something listed 'for Powerline"

"-----------------------------------------
" Buffer line extension 
"-----------------------------------------
"Enable the bufferline extension
"let g:airline#extensions#bufferline#enabled = 1
  
"-----------------------------------------
"CtrlP extension 
"-----------------------------------------
map <C-S-P> :CtrlPTag<CR>

"Use silversearcher or git for searching.
let g:ctrlp_use_caching = 0
if executable('ag')
    set grepprg=ag\ --nogroup\ --nocolor

    let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
else
  let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files . -co --exclude-standard', 'find %s -type f']
  let g:ctrlp_prompt_mappings = {
    \ 'AcceptSelection("e")': ['<space>', '<cr>', '<2-LeftMouse>'],
    \ }
endif

"-----------------------------------------
" Nerd Tree extension 
"-----------------------------------------
"Map Ctrl+N for Nerdtree
map <C-n> :NERDTreeToggle<CR>

let g:NERDTreeIndicatorMap = {
  \ "Modified"  : "✹ ",
  \ "Staged"    : "✚",
  \ "Untracked" : "✭",
  \ "Renamed"   : "➜ ",
  \ "Unmerged"  : "═",
  \ "Deleted"   : "✖",
  \ "Dirty"     : "✗",
  \ "Clean"     : "✔︎",
  \ "Unknown"   : "?i"
  \ }

"Autostart NerdTree if no file arguments
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

"let NERDTreeIgnore=['\.git','\.hg']

" NERDTress File highlighting
"filetype on
" TODO - Not sure why this isn't working...
"function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
"exec 'autocmd FileType nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
"exec 'autocmd FileType nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
"endfunction

"au VimEnter * call NERDTreeHighlightFile('jade', 'green', 'none', 'green', '#151515')
"au VimEnter * call NERDTreeHighlightFile('html', 'green', 'none', 'green', '#151515')
"au VimEnter * call NERDTreeHighlightFile('slim', 'green', 'none', 'green', '#151515')
"au VimEnter * call NERDTreeHighlightFile('coffee', '5', 'none', '#ff00ff', '#151515')
"au VimEnter * call NERDTreeHighlightFile('styl', '5', 'none', '#ff00ff', '#151515')
"au VimEnter * call NERDTreeHighlightFile('less', '5', 'none', '#ff00ff', '#151515')
"au VimEnter * call NERDTreeHighlightFile('scss', '5', 'none', '#ff00ff', '#151515')
"au VimEnter * call NERDTreeHighlightFile('sass', '5', 'none', '#ff00ff', '#151515')
"au VimEnter * call NERDTreeHighlightFile('ini', 'yellow', 'none', 'yellow', '#151515')
"au VimEnter * call NERDTreeHighlightFile('md', 'blue', 'none', '#3366FF', '#151515')
"au VimEnter * call NERDTreeHighlightFile('yml', 'yellow', 'none', 'yellow', '#151515')
"au VimEnter * call NERDTreeHighlightFile('config', 'yellow', 'none', 'yellow', '#151515')
"au VimEnter * call NERDTreeHighlightFile('conf', 'yellow', 'none', 'yellow', '#151515')
"au VimEnter * call NERDTreeHighlightFile('json', 'yellow', 'none', 'yellow', '#151515')
"au VimEnter * call NERDTreeHighlightFile('css', 'cyan', 'none', 'cyan', '#151515')
"au VimEnter * call NERDTreeHighlightFile('js', 'cyan', 'none', 'cyan', '#151515')
"au VimEnter * call NERDTreeHighlightFile('rb', 'Red', 'none', '#ffa500', '#151515')
"au VimEnter * call NERDTreeHighlightFile('py', 'Magenta', 'none', '#ff00ff', '#151515')

"-----------------------------------------
" Nerd Commenter Extension 
"-----------------------------------------
map cc <leader>c<space>

"-----------------------------------------
" Tagbar extension 
"-----------------------------------------
"Set Ctrl+T as the tagbar toggle
nmap <C-t> :TagbarToggle<CR>

"-----------------------------------------
" You Complete Me extension 
"-----------------------------------------
"Set a default ycm_extra_conf.py file
let g:ycm_global_ycm_extra_conf = "~/.ycm_extra_conf_default.py"

"-----------------------------------------
" EasyMotion extension 
"-----------------------------------------
"nmap <F5> <leader><leader>w

"-----------------------------------------
" Snippets extensions
"-----------------------------------------
"Set up snippets keys
function! g:UltiSnips_Complete()
    call UltiSnips#ExpandSnippet()
    if g:ulti_expand_res == 0
        if pumvisible()
            return "\<C-n>"
        else
            call UltiSnips#JumpForwards()
            if g:ulti_jump_forwards_res == 0
               return "\<TAB>"
            endif
        endif
    endif
    return ""
endfunction

au BufEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
let g:UltiSnipsListSnippets="<c-e>"
" this mapping Enter key to <C-y> to chose the current highlight item
" and close the selection list, same as other IDEs.
" CONFLICT with some plugins like tpope/Endwise
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" NOTE - to reload the vimrc without reloading vim use
"  :so $MYVIMRC
" while editing this file.
