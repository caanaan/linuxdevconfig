"-----------------------------------------
" Overview
"-----------------------------------------
" My maintained vimrc.
"
" TODO:
" Add overview of basic instructions to use each plugin

"-----------------------------------------
" Vundle Package Manager
"-----------------------------------------
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
Plugin 'scrooloose/nerdtree'              "Tree view of files - Ctrl+N
Plugin 'Xuyuanp/nerdtree-git-plugin'      "Nerdtree git status markup
Plugin 'The-NERD-Commenter'               "Quick comment toggling - cc
Plugin 'scrooloose/syntastic'             "Syntax markup
Plugin 'plasticboy/vim-markdown.git'      "Markdown support
Plugin 'ctrlpvim/ctrlp.vim'               "Fuzzy file and tag searching - Ctrl+P
Plugin 'Valloric/YouCompleteMe'           "Smart tab completion - Tab
Plugin 'SirVer/ultisnips'                 "Snippet engine - ?
Plugin 'tpope/vim-sensible'               "Generic and usual configs
Plugin 'honza/vim-snippets'               "Default snippets for lots of languages
Plugin 'vim-airline/vim-airline'          "Powerline like vim status bar 
Plugin 'vim-airline/vim-airline-themes'   "Airline themes
Plugin 'powerline/fonts'                  "Fonts needed for airline
Plugin 'edkolev/tmuxline.vim'             "Powerline like tmux status bar
Plugin 'Raimondi/delimitMate'             "Auto-completion for quotes, braces, etc 
Plugin 'xolox/vim-misc'                   "Required for easy-tags
Plugin 'xolox/vim-easytags'               "Automatic ctag generation
Plugin 'majutsushi/tagbar'                "Ctag bar view
Plugin 'tpope/vim-fugitive'               "Git integration
Plugin 'tpope/vim-sleuth'                 "Automtically set tab sizes
Plugin 'miyakogi/conoline.vim'            "Highlight current line
Plugin 'gabesoft/vim-ags'                 "Ag plugin for Vim
Plugin 'Lokaltog/vim-easymotion'          "Cool file navigation tool
Plugin 'haya14busa/incsearch.vim'         "Incremental search with EasyMotion
Plugin 'haya14busa/incsearch-fuzzy.vim'   "Fuzzy search addition to incremental search

"Cool plugins, but not in my workflow right now
"Plugin 'bling/vim-bufferline'         "Display buffers in status bar
"Plugin 'qualiabyte/vim-colorstepper'  "Step between colorschemes
"Plugin 'flazz/vim-colorschemes'       "Other vim colorschemes
"Plugin 'triglav/vim-ultisnips'        "Another snippet engine
"Plugin 'junegunn/vim-easy-align'      "Alignment/formatting plugin
"Plugin 'tpope/vim-surround'           "Parens, brackets, etc.
"Plugin 'miyakogi/slateblue.vim'       "Nice dark colorscheme

"Plugins that need work to function well
"Plugin 'vim-scripts/gitignore'        "NEED TO EVALUATE

"C Code Snippets -- not Ultisnips!
"https://github.com/vonj/snippets

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on

" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
" :PluginUpdate     - updates plugins with new versions.  Will need to
"                       recompile YCM afterwards!
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

"-----------------------------------------
" General Config 
"-----------------------------------------
"Set the default colorscheme
colorscheme lukes-dev-scheme

"Set the map leader key to ,
let mapleader=","

"Enable copying to and from the system clipboard and vim copy/paste buffer
map <silent> <leader>y "+y
nmap <silent> <leader>yy "+yy
map <silent> <leader>cp "+p

"Set the paste mode toggle to F10
set pastetoggle=<F10>

"Splitting Related
"Map Ctrl+Arrow keys to window movement for splits
nmap <silent> <C-Up> :wincmd k<CR>
nmap <silent> <C-Down> :wincmd j<CR>
nmap <silent> <C-Left> :wincmd h<CR>
nmap <silent> <C-Right> :wincmd l<CR>
nmap <silent> <A-Up> :sp<CR>
nmap <silent> <A-Down> :sp<CR>
nmap <silent> <A-Left> :vsp<CR>
nmap <silent> <A-Right> :vsp<CR>

set splitbelow
set splitright

if &term =~ '^screen'
   " tmux will send xterm-style keys when its xterm-keys option is on
   execute "set <xUp>=\e[1;*A"
   execute "set <xDown>=\e[1;*B"
   execute "set <xRight>=\e[1;*C"
   execute "set <xLeft>=\e[1;*D"
endif

"Set tab formats
set expandtab
set shiftwidth=3
set softtabstop=3

"Enable mouse support
set ttyfast
set mouse=a
set ttymouse=xterm2

"Set other editor configs
set number
set lazyredraw

"Set a mapping to allow copying a filename to the buffer
noremap <silent> <leader>f :let @+=expand("%:p")<CR>

"Allow leader and -/= to resize the current split
nnoremap <silent> <Leader>= :exe "resize " . (winheight(0) * 3/2)<CR>
nnoremap <silent> <Leader>- :exe "resize " . (winheight(0) * 2/3)<CR>

"Set up some quick shortcuts for Ctags and Cscope
noremap <Leader>i :set tags+=tags<CR> :cscope add cscope.out<CR>

"-----------------------------------------
" CScope Setup - 
"-----------------------------------------
if has('cscope')
  set cscopetag cscopeverbose

  " This seems to make the quickfix window NOT work - confusing...
  "if has('quickfix')
    "set cscopequickfix=s-,c-,d-,i-,t-,e-
  "endif

  cnoreabbrev csa cs add
  cnoreabbrev csf cs find
  cnoreabbrev csk cs kill
  cnoreabbrev csr cs reset
  cnoreabbrev css cs show
  cnoreabbrev csh cs help

  "command -nargs=0 Cscope cs add $VIMSRC/src/cscope.out $VIMSRC/src
  "command -nargs=0 Cscope cs add cscope.out
endif

" The following maps all invoke one of the following cscope search types:
"
"   's'   symbol: find all references to the token under cursor
"   'g'   global: find global definition(s) of the token under cursor
"   'c'   calls:  find all calls to the function name under cursor
"   't'   text:   find all instances of the text under cursor
"   'e'   egrep:  egrep search for the word under cursor
"   'f'   file:   open the filename under cursor
"   'i'   includes: find files that include the filename under cursor
"   'd'   called: find functions that function under cursor calls

" To do the first type of search, hit 'CTRL-\', followed by one of the
" cscope search types above (s,g,c,t,e,f,i,d).  The result of your cscope
" search will be displayed in the current window.  You can use CTRL-T to
" go back to where you were before the search.  
"

nmap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>	
nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>	
nmap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>	
nmap <C-\>t :cs find t <C-R>=expand("<cword>")<CR><CR>	
nmap <C-\>e :cs find e <C-R>=expand("<cword>")<CR><CR>	
nmap <C-\>f :cs find f <C-R>=expand("<cfile>")<CR><CR>	
nmap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>	


" Using 'CTRL-spacebar' (intepreted as CTRL-@ by vim) then a search type
" makes the vim window split horizontally, with search result displayed in
" the new window.
"
" (Note: earlier versions of vim may not have the :scs command, but it
" can be simulated roughly via:
"    nmap <C-@>s <C-W><C-S> :cs find s <C-R>=expand("<cword>")<CR><CR>	

nmap <C-@>s :scs find s <C-R>=expand("<cword>")<CR><CR>	
nmap <C-@>g :scs find g <C-R>=expand("<cword>")<CR><CR>	
nmap <C-@>c :scs find c <C-R>=expand("<cword>")<CR><CR>	
nmap <C-@>t :scs find t <C-R>=expand("<cword>")<CR><CR>	
nmap <C-@>e :scs find e <C-R>=expand("<cword>")<CR><CR>	
nmap <C-@>f :scs find f <C-R>=expand("<cfile>")<CR><CR>	
nmap <C-@>i :scs find i ^<C-R>=expand("<cfile>")<CR>$<CR>	
nmap <C-@>d :scs find d <C-R>=expand("<cword>")<CR><CR>

"-----------------------------------------
" Cono-line Extension
"-----------------------------------------
let g:conoline_auto_enable = 1

let g:conoline_use_colorscheme_default_normal=1
let g:conoline_use_colorscheme_default_insert=1

"-----------------------------------------
" Air-line Extension
"-----------------------------------------
let g:airline_powerline_fonts = 1
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
" unicode symbols
let g:airline_left_sep = '»'
let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
let g:airline_right_sep = '◀'
let g:airline_symbols.linenr = '␊'
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.linenr = '¶'
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'ρ'
let g:airline_symbols.paste = 'Þ'
let g:airline_symbols.paste = '∥'
let g:airline_symbols.whitespace = 'Ξ'

" airline symbols
let g:airline_left_sep = ''
let g:airline_left_alt_sep = ''
let g:airline_right_sep = ''
let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = ''

"Set the airline theme
let g:airline_theme="laederon"

"Turn off the whitespace issue enunciation
let g:airline#extensions#whitespace#enabled = 0

"NOTE - make sure to sed the system font to 'DejaVu Sans Mono for Powerline!"
"or something listed 'for Powerline"

"-----------------------------------------
" Buffer line extension 
"-----------------------------------------
"Enable the bufferline extension
"let g:airline#extensions#bufferline#enabled = 1
  
"-----------------------------------------
"CtrlP extension 
"-----------------------------------------
"Use silversearcher or git for searching.
let g:ctrlp_use_caching = 0
if executable('ag')
    " Use ag over grep
    set grepprg=ag\ --nogroup\ --nocolor

    " Use ag in CtrlP for listing files. Lightning fast and respects
    " .gitignore
    let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

    " ag is fast enough that CtrlP doesn't need to cache
    let g:ctrlp_use_caching = 0
else
  let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files . -co --exclude-standard', 'find %s -type f']
  let g:ctrlp_prompt_mappings = {
    \ 'AcceptSelection("e")': ['<space>', '<cr>', '<2-LeftMouse>'],
    \ }
endif

"Create mappings for other search types
nmap <leader>o :CtrlPBuffer<CR>
nmap <leader>p :CtrlPMRUFiles<CR>
nmap <leader>[ :CtrlPTag<CR>

"-----------------------------------------
" Vim-Ags extension 
"-----------------------------------------
" bind leader + s to search for word under cursor
nnoremap <leader>s :Ags<CR>

"Only display 2 lines of context before and after a search result
let g:ags_agcontext = 2

"Provide a remapping from ag to Ags
cnoreabbrev ag Ags

"-----------------------------------------
" Nerd Tree extension 
"-----------------------------------------
"Map Ctrl+N for Nerdtree
map <C-n> :NERDTreeToggle<CR>

let g:NERDTreeIndicatorMap = {
  \ "Modified"  : "✹ ",
  \ "Staged"    : "✚",
  \ "Untracked" : "✭",
  \ "Renamed"   : "➜ ",
  \ "Unmerged"  : "═",
  \ "Deleted"   : "✖",
  \ "Dirty"     : "✗",
  \ "Clean"     : "✔︎",
  \ "Unknown"   : "?i"
  \ }

"Autostart NerdTree if no file arguments
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

"Set up some mapppings to help with Nerdtree
noremap <Leader>nf :NERDTreeFind<CR>

"let NERDTreeIgnore=['\.git','\.hg']

" NERDTress File highlighting
"filetype on
" TODO - Not sure why this isn't working...
"function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)
"exec 'autocmd FileType nerdtree highlight ' . a:extension .' ctermbg='. a:bg .' ctermfg='. a:fg .' guibg='. a:guibg .' guifg='. a:guifg
"exec 'autocmd FileType nerdtree syn match ' . a:extension .' #^\s\+.*'. a:extension .'$#'
"endfunction

"au VimEnter * call NERDTreeHighlightFile('jade', 'green', 'none', 'green', '#151515')
"au VimEnter * call NERDTreeHighlightFile('html', 'green', 'none', 'green', '#151515')
"au VimEnter * call NERDTreeHighlightFile('slim', 'green', 'none', 'green', '#151515')
"au VimEnter * call NERDTreeHighlightFile('coffee', '5', 'none', '#ff00ff', '#151515')
"au VimEnter * call NERDTreeHighlightFile('styl', '5', 'none', '#ff00ff', '#151515')
"au VimEnter * call NERDTreeHighlightFile('less', '5', 'none', '#ff00ff', '#151515')
"au VimEnter * call NERDTreeHighlightFile('scss', '5', 'none', '#ff00ff', '#151515')
"au VimEnter * call NERDTreeHighlightFile('sass', '5', 'none', '#ff00ff', '#151515')
"au VimEnter * call NERDTreeHighlightFile('ini', 'yellow', 'none', 'yellow', '#151515')
"au VimEnter * call NERDTreeHighlightFile('md', 'blue', 'none', '#3366FF', '#151515')
"au VimEnter * call NERDTreeHighlightFile('yml', 'yellow', 'none', 'yellow', '#151515')
"au VimEnter * call NERDTreeHighlightFile('config', 'yellow', 'none', 'yellow', '#151515')
"au VimEnter * call NERDTreeHighlightFile('conf', 'yellow', 'none', 'yellow', '#151515')
"au VimEnter * call NERDTreeHighlightFile('json', 'yellow', 'none', 'yellow', '#151515')
"au VimEnter * call NERDTreeHighlightFile('css', 'cyan', 'none', 'cyan', '#151515')
"au VimEnter * call NERDTreeHighlightFile('js', 'cyan', 'none', 'cyan', '#151515')
"au VimEnter * call NERDTreeHighlightFile('rb', 'Red', 'none', '#ffa500', '#151515')
"au VimEnter * call NERDTreeHighlightFile('py', 'Magenta', 'none', '#ff00ff', '#151515')

"-----------------------------------------
" Nerd Commenter Extension 
"-----------------------------------------
map cc <leader>c<space>

"-----------------------------------------
" Tagbar extension 
"-----------------------------------------
"Set Ctrl+T as the tagbar toggle
nmap <C-t> :TagbarToggle<CR>

"-----------------------------------------
" You Complete Me extension 
"-----------------------------------------
"Set a default ycm_extra_conf.py file
let g:ycm_global_ycm_extra_conf = "~/.ycm_extra_conf_default.py"

"-----------------------------------------
" EasyMotion extension 
"-----------------------------------------

"Easymotion overwindow configuration
" s{char}{char} to move to {char}{char}
map <SPACE> <Plug>(easymotion-overwin-f2)
nmap <Leader><Leader>s <Plug>(easymotion-overwin-f2)

" Move to line
map <Leader><Leader>l <Plug>(easymotion-bd-jk)
nmap <Leader><Leader>l <Plug>(easymotion-overwin-line)

" Move to word
map  <Leader><Leader>w <Plug>(easymotion-bd-w)
nmap <Leader><Leader>w <Plug>(easymotion-overwin-w)

" Mappings for easymotion search
map e/ <Plug>(easymotion-sn)
omap e/ <Plug>(easymotion-tn)

" Mappings for Easymotion incremental search
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

" Mappings for Easymotion fuzzy incremental search
map z/ <Plug>(incsearch-fuzzy-/)
map z? <Plug>(incsearch-fuzzy-?)
map zg/ <Plug>(incsearch-fuzzy-stay)

"-----------------------------------------
" Snippets extensions
"-----------------------------------------
"Set up snippets keys
function! g:UltiSnips_Complete()
    call UltiSnips#ExpandSnippet()
    if g:ulti_expand_res == 0
        if pumvisible()
            return "\<C-n>"
        else
            call UltiSnips#JumpForwards()
            if g:ulti_jump_forwards_res == 0
               return "\<TAB>"
            endif
        endif
    endif
    return ""
endfunction

au BufEnter * exec "inoremap <silent> " . g:UltiSnipsExpandTrigger . " <C-R>=g:UltiSnips_Complete()<cr>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"
let g:UltiSnipsListSnippets="<c-e>"
" this mapping Enter key to <C-y> to chose the current highlight item
" and close the selection list, same as other IDEs.
" CONFLICT with some plugins like tpope/Endwise
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"

" NOTE - to reload the vimrc without reloading vim use
"  :so $MYVIMRC
" while editing this file.
